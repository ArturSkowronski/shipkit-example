//TODO this script plugin makes assumptions about root project
// we need to remove those assumptions or fail early if assumptions are not met (for example missing cd plugin on root)

apply plugin: 'java'
apply plugin: 'maven-publish'

def licenseFiles = copySpec {
    from(rootDir) { include 'LICENSE' }
}

jar {
    with licenseFiles
}

task sourcesJar(type: Jar) {
    from(sourceSets.main.allSource)
    classifier = "sources"
    with licenseFiles
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    with licenseFiles
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//so that we have access to ext.configurePom() method
apply from: "$rootDir/gradle/pom.gradle"

publishing {
    publications {
        mainJar(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            //fine tune the pom based on "gradle/pom.gradle"
            project.ext.configurePom(project, it)
        }
    }
}

//so that we flesh out problems with maven publication during the build process
build.dependsOn publishToMavenLocal

project.apply plugin: "com.jfrog.bintray"
rootProject.bintrayUploadAll.dependsOn bintrayUpload
bintrayUpload.doFirst {
    it.apiKey = rootProject.envVar('BINTRAY_API_KEY') //validates the presence of the env var during execution phase
    logger.lifecycle "$path - publishing to Bintray\n" +
            "  - dry run: $it.dryRun\n" +
            "  - repository: $it.repoName\n" +
            "  - version: $it.versionName\n" +
            "  - Maven Central sync: $it.syncToMavenCentral"
}

bintray {
    afterEvaluate {
        //we have to access publications as late as possible,
        // otherwise stuff does not work, for example pom does not have dependencies :)
        publications = project.publishing.publications*.name
    }

    publish = true
    dryRun = rootProject.ext.has("releaseDryRun")

    pkg {
        desc = project.description
        publicDownloadNumbers = true

        //TODO we need to have a method for accessing project properties with presence validation (and clean message to user)
        repo = rootProject.ext.bintray_repo

        //TODO get github repository from 'ext'
        websiteUrl = "https://github.com/${rootProject.ext.gh_repository}"
        issueTrackerUrl = "https://github.com/${rootProject.ext.gh_repository}/issues"
        vcsUrl = "https://github.com/${rootProject.ext.gh_repository}.git"

        // optional version attributes
        version {
            vcsTag = "v$project.version"
            gpg {
                sign = true
            }
        }
    }
}
